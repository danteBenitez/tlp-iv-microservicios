import * as fs from 'fs/promises';
import * as path from "path";

export const UPLOAD_PATH = "./uploads";
export const TEMP_UPLOAD_PATH = "./uploads/temp";

type UploadResult = {
    /** The filename as generated by the DiskStorage engine. This is a path into a tmp folder */
    filename: string,
    /** The original filename, the one on the uploader's computer */
    originalFilename: string
}

export class FilesService {

    async uploadFile(file: Express.Multer.File, prefix: string = ""): Promise<UploadResult> {
        const filename = file.filename;
        const filePath = this.#resolveToTemp(filename);
        const withPrefix = `${prefix}-${file.originalname}`;
        await fs.rename(filePath, this.#resolveFile(withPrefix));
        return {
            filename: withPrefix,
            originalFilename: file.originalname,
        };
    }

    async removeFile(filename: string): Promise<boolean> {
        await fs.unlink(this.#resolveFile(filename));
        return true;
    }


    async readFile(filename: string) {
        return fs.readFile(this.#resolveFile(filename));
    }

    #resolveFile(filename: string) {
        return path.resolve(UPLOAD_PATH, filename);
    }

    #resolveToTemp(filename: string) {
        return path.resolve(TEMP_UPLOAD_PATH, filename);
    }
}

export const fileService = new FilesService();